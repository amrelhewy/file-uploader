{"version":3,"sources":["Nav.js","Upload.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","Nav","classes","className","AppBar","position","Toolbar","variant","IconButton","edge","color","aria-label","Typography","button","margin","marginTop","width","marginBottom","Upload","done","linkref","useRef","useState","progress","setprogress","uploaddone","setuploaddone","link","setlink","ref","href","Tooltip","title","style","marginLeft","onClick","navigator","clipboard","writeText","prog","height","display","flexDirection","alignItems","justifyContent","Button","current","click","startIcon","type","onChange","e","data","FormData","append","target","files","name","axios","post","then","res","setTimeout","LinearProgress","value","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uTAMMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaJ,EAAMK,QAAQ,QAGlB,SAASC,IACpB,IAAMC,EAAUT,IAEhB,OACI,yBAAKU,UAAWD,EAAQN,MACxB,kBAACQ,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,CAASC,QAAQ,SACf,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQN,UAAWD,EAAQJ,WAAYY,MAAM,UAAUC,aAAW,SAGnF,kBAACC,EAAA,EAAD,CAAYL,QAAQ,KAAKG,MAAM,WAA/B,kB,0FCfNjB,G,MAAYC,aAAW,SAACC,GAAD,MAAY,CACvCkB,OAAQ,CACNC,OAAQnB,EAAMK,QAAQ,IAExBJ,KAAM,CACJmB,UAAW,OACXC,MAAO,MACPC,aAAc,aAGH,SAASC,IACtB,IAoBIC,EApBEC,EAAQC,iBAAO,WADU,EAECC,mBAAS,GAFV,mBAExBC,EAFwB,KAEdC,EAFc,OAGKF,oBAAS,GAHd,mBAGxBG,EAHwB,KAGZC,EAHY,OAIPJ,qBAJO,mBAIxBK,EAJwB,KAIlBC,EAJkB,KAsB3BH,IACFN,EACE,6BACE,oDACA,qEAA0C,uBAAGU,IAAKT,EAASU,KAAMH,GAAvB,QAA1C,IAAgF,kBAACI,EAAA,EAAD,CAASC,MAAO,4CAAwB,kBAAC,IAAD,CAAeC,MAAO,CAACC,WAAW,QAAS/B,UAAU,OAAOgC,QAAS,WAAKC,UAAUC,UAAUC,UAAUX,OAAhO,OAKN,IAAMzB,EAAUT,IACVoC,EAAMR,iBAAO,OACbkB,EAAOlB,iBAAO,QACpB,OACE,yBACEY,MAAO,CACLO,OAAQ,OACRC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,eAAgB,WAGlB,mEACA,kBAACC,EAAA,EAAD,CACEV,QAAS,WACPN,EAAIiB,QAAQC,SAEdd,MAAO,CAAElB,UAAW,QACpBR,QAAQ,YACRG,MAAM,UACNP,UAAWD,EAAQW,OACnBmC,UAAW,kBAAC,IAAD,OARb,SAWE,2BACEC,KAAK,OACLpB,IAAKA,EACLqB,SAtDW,SAACC,GAClB3B,EAAY,GACZe,EAAKO,QAAQb,MAAMQ,QAAU,GAC7BjB,EAAY,IACZ,IAAI4B,EAAO,IAAIC,SACfD,EAAKE,OAAO,OAAQH,EAAEI,OAAOC,MAAM,GAAIL,EAAEI,OAAOC,MAAM,GAAGC,MACzDC,IAAMC,KAAK,SAAUP,GAAMQ,MAAK,SAACC,GAC/BjC,EAAQiC,EAAIT,MACZ5B,EAAY,KACZE,GAAc,GACdoC,YAAW,WACTvB,EAAKO,QAAQb,MAAMQ,QAAQ,SAE1B,SA0CCR,MAAO,CAAEQ,QAAS,WAGtB,yBAAKtC,UAAWD,EAAQN,MACtB,kBAACmE,EAAA,EAAD,CACE9B,MAAO,CAAEQ,QAAS,QAClBZ,IAAKU,EACLhC,QAAQ,cACRyD,MAAOzC,KAGVJ,GC5EQ8C,MAVf,WAEE,OACE,yBAAK9D,UAAU,OAClB,kBAACF,EAAD,MACA,kBAAC,EAAD,QCGmBiE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBvC,WACrBA,UAAUwC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f6fcf0eb.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n  }));\nexport default function Nav() {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n        <AppBar position=\"static\">\n          <Toolbar variant=\"dense\">\n            <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n              \n            </IconButton>\n            <Typography variant=\"h6\" color=\"inherit\">\n              File Upload\n            </Typography>\n          </Toolbar>\n        </AppBar>\n      </div>\n    )\n}\n","import React, { useRef, useState } from \"react\";\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport axios from \"axios\";\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\nimport { Tooltip } from '@material-ui/core';\nimport './Upload.css'\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    margin: theme.spacing(1),\n  },\n  root: {\n    marginTop: \"20px\",\n    width: \"30%\",\n    marginBottom: \"10px\",\n  },\n}));\nexport default function Upload() {\n  const linkref=useRef('linkref')\n  const [progress, setprogress] = useState(0);\n  const [uploaddone, setuploaddone] = useState(false);\n  const [link, setlink] = useState();\n  const uploadfile = (e) => {\n    setprogress(0);\n    prog.current.style.display = \"\";\n    setprogress(40);\n    let data = new FormData();\n    data.append(\"file\", e.target.files[0], e.target.files[0].name);\n    axios.post(\"upload\", data).then((res) => {\n      setlink(res.data);\n      setprogress(100);\n      setuploaddone(true);\n      setTimeout(() => {\n        prog.current.style.display='none'\n\n      }, 2000);\n    });\n  };\n  let done;\n  if (uploaddone) {\n    done = (\n      <div>\n        <label>Upload Complete! </label>\n        <label>You can download the file via this <a ref={linkref} href={link}>link</a> <Tooltip title={<span>Copy Link</span>}><FileCopyIcon  style={{marginLeft:'10px'}} className='file' onClick={()=>{navigator.clipboard.writeText(link)}}/></Tooltip> </label>\n      </div>\n    );\n  }\n\n  const classes = useStyles();\n  const ref = useRef(\"ref\");\n  const prog = useRef(\"prog\");\n  return (\n    <div\n      style={{\n        height: \"60vh\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n      }}\n    >\n      <label>Upload any file now easy & quick</label>\n      <Button\n        onClick={() => {\n          ref.current.click();\n        }}\n        style={{ marginTop: \"20px\" }}\n        variant=\"contained\"\n        color=\"default\"\n        className={classes.button}\n        startIcon={<CloudUploadIcon />}\n      >\n        Upload\n        <input\n          type=\"file\"\n          ref={ref}\n          onChange={uploadfile}\n          style={{ display: \"none\" }}\n        />\n      </Button>\n      <div className={classes.root}>\n        <LinearProgress\n          style={{ display: \"none\" }}\n          ref={prog}\n          variant=\"determinate\"\n          value={progress}\n        />\n      </div>\n      {done}\n    </div>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport Nav from './Nav'\nimport Upload from './Upload'\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n <Nav/>\n <Upload/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}